#include "lab_m1/Tema1/Tema.h"

#include <vector>
#include <iostream>

#include "lab_m1/lab3/transform2D.h"
#include "lab_m1/lab3/object2D.h"



using namespace std;
using namespace m1;


/*
 *  To find out more about `FrameStart`, `Update`, `FrameEnd`
 *  and the order in which they are called, see `world.cpp`.
 */


Tema1::Tema1()
{
}


Tema1::~Tema1()
{
}


void Tema1::Init()
{
    glm::ivec2 resolution = window->GetResolution();
    auto camera = GetSceneCamera();
    camera->SetOrthographic(0, (float)resolution.x, 0, (float)resolution.y, 0.01f, 400);
    camera->SetPosition(glm::vec3(0, 0, 50));
    camera->SetRotation(glm::vec3(0, 0, 0));
    camera->Update();
    GetCameraInput()->SetActive(false);

    squareSide = 150;

        glm::vec3 corner1 = glm::vec3(0, 0, 0);
        Mesh* dsquare = object2D::CreateSquare("dark_square", corner1, squareSide, glm::vec3(0.1, 0, 0.5), true);
        AddMeshToList(dsquare);

        glm::vec3 corner2 = glm::vec3(0, 0, 0);
        Mesh* lsquare = object2D::CreateSquare("light_square", corner2, squareSide, glm::vec3(0.2, 0, 0.6), true);
        AddMeshToList(lsquare);
    






}


void Tema1::FrameStart()
{
    // Clears the color buffer (using the previously set color) and depth buffer
    glClearColor(0, 0, 0, 1);
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

   resolution = window->GetResolution();
    // Sets the screen area where to draw
    glViewport(0, 0, resolution.x, resolution.y);
}


void Tema1::Update(float deltaTimeSeconds)
{
    
    modelMatrix = glm::mat3(1);

   for (int i = 1; i < 6; i+=2) { // creez tabla, alternand culoriile patratelor


        modelMatrix *= transform2D::Translate(resolution.x - i * squareSide, 0);
        RenderMesh2D(meshes["dark_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix *= transform2D::Translate(0, squareSide);
        RenderMesh2D(meshes["light_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix *= transform2D::Translate(0, squareSide);
        RenderMesh2D(meshes["dark_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix = glm::mat3(1); // Resetam matricea model 


        modelMatrix *= transform2D::Translate(resolution.x - (i+1) * squareSide, 0);
        RenderMesh2D(meshes["light_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix *= transform2D::Translate(0, squareSide);
        RenderMesh2D(meshes["dark_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix *= transform2D::Translate(0, squareSide);
        RenderMesh2D(meshes["light_square"], shaders["VertexColor"], modelMatrix);

        modelMatrix = glm::mat3(1); // Resetam matricea model 

        
         }


   /*glm::vec3 color(0, 0, 0.5f);
   vector<VertexFormat> ver = { {{0,0,0},color}, {{1,1,1},color} };
   vector<unsigned int> indx = { 0,1 };

   Mesh* line = new Mesh("generatedLine");
   line->SetDrawMode(GL_LINES);
   line->InitFromData(ver, indx);
   meshes["generatedLine"] = line;

   glm::mat3 m(1);

   m *= transform2D::Translate(50, 50);

   RenderMesh(line, shaders["VertexColor"],m);
   */
}


void Tema1::FrameEnd()
{
    //DrawCoordinateSystem();

}


/*
 *  These are callback functions. To find more about callbacks and
 *  how they behave, see `input_controller.h`.
 */


void Tema1::OnInputUpdate(float deltaTime, int mods)
{
    // Add smth


}


void Tema1::OnKeyPress(int key, int mods)
{
    // Add key press event
}


void Tema1::OnKeyRelease(int key, int mods)
{
    // Add key release event
}


void Tema1::OnMouseMove(int mouseX, int mouseY, int deltaX, int deltaY)
{
    // Add mouse move event
}


void Tema1::OnMouseBtnPress(int mouseX, int mouseY, int button, int mods)
{
    // Add mouse button press event
}


void Tema1::OnMouseBtnRelease(int mouseX, int mouseY, int button, int mods)
{
    // Add mouse button release event
}


void Tema1::OnMouseScroll(int mouseX, int mouseY, int offsetX, int offsetY)
{
}


void Tema1::OnWindowResize(int width, int height)
{
}
